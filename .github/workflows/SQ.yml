name: workflow_demo(SQ,PA,HF)

on:
  workflow_dispatch:
    inputs:
      selection:
        description: "major, minor"
        required: true
        # default: "warning"
        # type: choice
        # options:
        #   - SQ
        #   - PA
        #   - HF

permissions:
  contents: write

jobs:
  update_version_only:
    runs-on: ubuntu-latest
    steps:
      - name: checkout release branch
        uses: actions/checkout@v4
        with:
          ref: release
          fetch-depth: 100
      - name: setup git user
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
      - name: get current version
        run: |
          echo "CURRENT_VERSION=$(cat info/version.info)" >> $GITHUB_ENV
      - name: update version
        run: |
          INPUT_SELECTION="${{ github.event.inputs.selection }}"
          MAJOR=$(echo "${{ env.CURRENT_VERSION }}" | cut -d '.' -f1)
          MINOR=$(echo "${{ env.CURRENT_VERSION }}" | cut -d '.' -f2)
          PATCH=$(echo "${{ env.CURRENT_VERSION }}" | cut -d '.' -f3)

          if [[ "${INPUT_SELECTION}" == "minor" ]]; then
            NEW_MINOR=$((MINOR + 1))
            NEW_VERSION="$MAJOR.$NEW_MINOR.0"
          elif [[ "${INPUT_SELECTION}" == "major" ]]; then
            NEW_MAJOR=$((MAJOR + 1))
            NEW_VERSION="$NEW_MAJOR.0.0"
          # elif [[ "${INPUT_SELECTION}" == "PA" || "${INPUT_SELECTION}" == "HF" ]]; then
            # NEW_PATCH=$((PATCH + 1))
            # NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          # fi

          VERSION="${NEW_VERSION}"  

          echo $VERSION > info/version.info
          echo "Updated Version to $VERSION"

          git add info/version.info
          git commit -m "Update Version to ${VERSION}"
          git push origin release
  merge_to_main_only:
    needs: update_version_only
    runs-on: ubuntu-latest
    steps:
      - name: checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 100
      # - name: setup git user
      #   run: |
      #     git config --global user.name 'github-actions[bot]'
      #     git config --global user.email 'github-actions[bot]@users.noreply.github.com'
      - name: merge release into main
        run: |
          git fetch origin release
          if ! git merge --ff origin/release; then
            echo "FF merge failed, falling back to no-FF merge."
            git merge --no-ff origin/release -m "Merge release into main with merge commit "
          fi
          git push origin main
  apply_tag:
    needs: merge_to_main_only
    runs-on: ubuntu-latest
    steps:
      - name: checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 100

      # - name: setup git user
      #   run: |
      #     git config --global user.name 'github-actions[bot]'
      #     git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: get update verison
        run: |
          echo "UPDATE_VERSION=$(cat info/version.info)" >> $GITHUB_ENV

      - name: process
        run: |
          set -e  # terminate on error

          VERSION="${{ env.UPDATE_VERSION }}"
          VERSION_TAG="v${{ env.UPDATE_VERSION }}"

          git tag "${VERSION_TAG}"
          git push origin "${VERSION_TAG}"

          git fetch --tags
          if git rev-parse --verify --quiet "QC"; then
            git tag -f QC
          else
            git tag QC
          fi
          git push -f origin QC
