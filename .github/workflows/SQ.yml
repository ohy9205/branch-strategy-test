name: SQ modify

on:
  workflow_dispatch:
    inputs:
      selection:
        description: "major or minor"
        required: true
        type: choice
        options:
          - major
          - minor

permissions:
  contents: write

jobs:
  update_version_only:
    runs-on: ubuntu-latest
    steps:
      - name: checkout release branch
        uses: actions/checkout@v4
        with:
          ref: release
          fetch-depth: 100
      - name: setup git user
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
      - name: save current HEAD (for rollback)
        run: echo "OLD_HEAD=$(git rev-parse HEAD)" >> $GITHUB_ENV
      - name: update version
        run: |
          CURRENT_VERSION=$(cat info/version.info)

          INPUT_SELECTION="${{ github.event.inputs.selection }}"
          MAJOR=$(echo "${CURRENT_VERSION}" | cut -d '.' -f1)
          MINOR=$(echo "${CURRENT_VERSION}" | cut -d '.' -f2)
          PATCH=$(echo "${CURRENT_VERSION}" | cut -d '.' -f3)

          if [[ "${INPUT_SELECTION}" == "minor" ]]; then
            NEW_MINOR=$((MINOR + 1))
            NEW_VERSION="$MAJOR.$NEW_MINOR.0"
          elif [[ "${INPUT_SELECTION}" == "major" ]]; then
            NEW_MAJOR=$((MAJOR + 1))
            NEW_VERSION="$NEW_MAJOR.0.0"
          fi

          VERSION="${NEW_VERSION}"  

          echo "UPDATE_VERSION=${VERSION}" >> $GITHUB_ENV
          echo $VERSION > info/version.info
          echo "Updated Version to $VERSION"

          git add info/version.info
          git commit -m "Update Version to ${VERSION}"
          git push origin release
      - name: merge release into main
        run: |
          git fetch origin main
          git switch -c main origin/main
          if ! git merge --ff origin/release; then
            echo "FF merge failed, falling back to no-FF merge."
            git merge --no-ff origin/release -m "Merge release into main with merge commit "
          fi
          git push origin main
      - name: tag process
        run: |
          set -e  # terminate on error

          VERSION_TAG="v${{ env.UPDATE_VERSION }}"

          git tag "${VERSION_TAG}"
          git push origin "${VERSION_TAG}"

          git fetch --tags
          if git rev-parse --verify --quiet "QC"; then
            git tag -f QC
          else
            git tag QC
          fi
          git push -f origin QC
      - name: rollback if failure
        if: ${{ failure() }}
        run: |
          echo "An error occurred, rolling back changes..."
          git reset --hard "${{ env.OLD_HEAD }}"
          git push origin HEAD:release --force
          if [ -n "${{ env.NEW_VERSION }}" ]; then
            git tag -d "${{ env.NEW_VERSION }}"
            git push origin :refs/tags/"${{ env.NEW_VERSION }}"
          fi
